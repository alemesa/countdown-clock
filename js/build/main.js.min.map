{"version":3,"sources":["timer.js","timezones.js"],"names":["getLocalTimeZone","Date","getTimezoneOffset","currentTime","setInterval","now","seconds","getSeconds","minutes","getMinutes","hour","getHours","ampm","display","current","textContent","timer","clearInterval","countdown","then","displayTimeLeft","displayEndTime","secondsLeft","Math","round","floor","remainderSeconds","timerDisplay","document","title","timestamp","end","hours","endDisplay","startTimer","parseInt","this","dataset","time","displayTimeZones","tz","utc","cityName","city","img","country","difference","timezoneSeconds","timezone","innerHTML","console","log","querySelector","buttons","querySelectorAll","timezones","addEventListener","forEach","button","customForm","e","preventDefault","mins","value","reset"],"mappings":"aASA,SAAAA,mBAGA,QAFA,IAAAC,MACAC,oBAAA,GAIA,SAAAC,cACAC,YAAA,WACA,IAAAC,EAAA,IAAAJ,KACAK,EACAD,EAAAE,aAAA,GAAA,IAAAF,EAAAE,aAAAF,EAAAE,aACAC,EACAH,EAAAI,aAAA,GAAA,IAAAJ,EAAAI,aAAAJ,EAAAI,aAEAC,EAAAL,EAAAM,WAAA,GAAAN,EAAAM,WAAA,GAAAN,EAAAM,WACAC,EAAAP,EAAAM,WAAA,GAAA,KAAA,KACAE,GAAA,GAAAH,EAAA,GAAAA,GAAA,IAAAF,EAAA,IAAAF,EAAA,IAAAM,EAEAE,QAAAC,YAAAF,GACA,KAKA,SAAAG,MAAAV,GAEAW,cAAAC,WAEA,IACAC,EADAlB,KAAAI,MACA,IAAAC,EACAc,gBAAAd,GACAe,eAAAF,GAEAD,UAAAd,YAAA,WACA,IAAAkB,EAAAC,KAAAC,OAAAL,EAAAlB,KAAAI,OAAA,KAEAiB,EAAA,EACAL,cAAAC,WAGAE,gBAAAE,IACA,KAGA,SAAAF,gBAAAd,GACA,IAAAE,EAAAe,KAAAE,MAAAnB,EAAA,IACAoB,EAAApB,EAAA,GACAoB,EAAA,KACAA,EAAA,IAAAA,GAEA,IAAAb,EAAAL,EAAA,IAAAkB,EACAC,aAAAZ,YAAAF,EACAe,SAAAC,MAAAhB,EAAA,KAGA,SAAAQ,eAAAS,GACA,IAAAC,EAAA,IAAA9B,KAAA6B,GACAE,EAAAD,EAAApB,WAAA,GAAAoB,EAAApB,WAAA,GAAAoB,EAAApB,WAEAH,EACAuB,EAAAtB,aAAA,GAAA,IAAAsB,EAAAtB,aAAAsB,EAAAtB,aACAG,EAAAmB,EAAApB,WAAA,GAAA,KAAA,KAEAE,EAAAA,eAAA,GAAAmB,EAAA,GAAAA,GAAA,IAAAxB,EAAA,IAAAI,EACAqB,WAAAlB,YAAAF,EAGA,SAAAqB,aAEAlB,MADAmB,SAAAC,KAAAC,QAAAC,OC3EA,SAAAtC,mBAGA,QAFA,IAAAC,MACAC,oBAAA,GAIA,SAAAqC,iBAAAC,GACA,IAAAC,EAAAN,SAAAK,EAAAH,QAAAI,KACAC,EAAAF,EAAAH,QAAAM,KAEAC,EAAAA,6BADAJ,EAAAH,QAAAQ,QACA,WACAC,EAAA,IAAAL,EAAAzC,oBAAA,GAAA,IAEAI,YAAA,WACA,IACA2C,EADA9C,KAAAI,MACAyC,EACAE,EAAA,IAAA/C,KAAA8C,GACAzC,EACA0C,EAAAzC,aAAA,GACA,IAAAyC,EAAAzC,aACAyC,EAAAzC,aACAC,EACAwC,EAAAvC,aAAA,GACA,IAAAuC,EAAAvC,aACAuC,EAAAvC,aAEAC,EACAsC,EAAArC,WAAA,GAAAqC,EAAArC,WAAA,GAAAqC,EAAArC,WACAC,EAAAoC,EAAArC,WAAA,GAAA,KAAA,KACAE,EAAA+B,EAAA,IAAAF,EAAA,KAAA,GAAAhC,EACA,GACAA,GAFA,IAEAF,EAFA,IAEAF,EAFA,IAEAM,EACA4B,EAAAS,UAAApC,GACA,KDnCAqC,QAAAC,IAAA,gCAEA,IAAAjC,eAAAA,EACAS,aAAAC,SAAAwB,cAAA,uBACAnB,WAAAL,SAAAwB,cAAA,sBACAC,QAAAzB,SAAA0B,iBAAA,eACAC,UAAA3B,SAAA0B,iBAAA,cACAxC,QAAAc,SAAAwB,cAAA,sBAwBAxB,SAAA4B,iBAAA,mBAAArD,aAkDAkD,QAAAI,QAAA,SAAAC,GAAA,OAAAA,EAAAF,iBAAA,QAAAtB,cACAN,SAAA+B,WAAAH,iBAAA,SAAA,SAAAI,GACAA,EAAAC,iBACA,IAAAC,EAAA1B,KAAA5B,QAAAuD,MACA3B,KAAA4B,QACAhD,MAAA,GAAA8C,KCtFAZ,QAAAC,IAAA,oCAsCAvB,SAAA4B,iBACA,mBACAD,UAAAE,QAAA,SAAAjB,GAAA,OAAAD,iBAAAC","file":"main.js","sourcesContent":["console.log('This is the timer scripts ‚è≤Ô∏è');\r\n\r\nlet countdown;\r\nconst timerDisplay = document.querySelector('.display__time-left');\r\nconst endDisplay = document.querySelector('.display__end-time');\r\nconst buttons = document.querySelectorAll('[data-time]');\r\nconst timezones = document.querySelectorAll('[data-utc]');\r\nconst current = document.querySelector('.display__time-now');\r\n\r\nfunction getLocalTimeZone() {\r\n  let now = new Date();\r\n  let localUTC = -(now.getTimezoneOffset() / 60);\r\n  return localUTC;\r\n}\r\n\r\nfunction currentTime() {\r\n  setInterval(() => {\r\n    const now = new Date(); // current time\r\n    const seconds =\r\n      now.getSeconds() < 10 ? '0' + now.getSeconds() : now.getSeconds();\r\n    const minutes =\r\n      now.getMinutes() < 10 ? '0' + now.getMinutes() : now.getMinutes();\r\n\r\n    const hour = now.getHours() > 12 ? now.getHours() % 12 : now.getHours();\r\n    const ampm = now.getHours() > 11 ? 'PM' : 'AM';\r\n    const display = `${hour == 0 ? 12 : hour}:${minutes}:${seconds} ${ampm}`;\r\n\r\n    current.textContent = display;\r\n  }, 1000);\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', currentTime);\r\n\r\nfunction timer(seconds) {\r\n  //clear existing timers\r\n  clearInterval(countdown);\r\n\r\n  const now = Date.now(); // current time\r\n  const then = now + seconds * 1000; // future time\r\n  displayTimeLeft(seconds); // invoke function to shwow first number\r\n  displayEndTime(then);\r\n\r\n  countdown = setInterval(() => {\r\n    const secondsLeft = Math.round((then - Date.now()) / 1000);\r\n    // check if stop\r\n    if (secondsLeft < 0) {\r\n      clearInterval(countdown);\r\n      return;\r\n    }\r\n    displayTimeLeft(secondsLeft);\r\n  }, 1000);\r\n}\r\n\r\nfunction displayTimeLeft(seconds) {\r\n  const minutes = Math.floor(seconds / 60);\r\n  let remainderSeconds = seconds % 60;\r\n  if (remainderSeconds < 10) {\r\n    remainderSeconds = '0' + remainderSeconds;\r\n  }\r\n  const display = `${minutes}:${remainderSeconds}`;\r\n  timerDisplay.textContent = display;\r\n  document.title = `${display} ‚è∞`;\r\n}\r\n\r\nfunction displayEndTime(timestamp) {\r\n  const end = new Date(timestamp);\r\n  let hours = end.getHours() > 12 ? end.getHours() % 12 : end.getHours();\r\n\r\n  let minutes =\r\n    end.getMinutes() < 10 ? '0' + end.getMinutes() : end.getMinutes();\r\n  let ampm = end.getHours() > 11 ? 'PM' : 'AM';\r\n\r\n  const display = `Be back At ${hours == 0 ? 12 : hours}:${minutes} ${ampm}`;\r\n  endDisplay.textContent = display;\r\n}\r\n\r\nfunction startTimer() {\r\n  const seconds = parseInt(this.dataset.time);\r\n  timer(seconds);\r\n}\r\n\r\nbuttons.forEach(button => button.addEventListener('click', startTimer));\r\ndocument.customForm.addEventListener('submit', function(e) {\r\n  e.preventDefault();\r\n  const mins = this.minutes.value;\r\n  this.reset();\r\n  timer(mins * 60);\r\n});\r\n","console.log('This is the timezones script üó∫Ô∏è');\r\n\r\nfunction getLocalTimeZone() {\r\n  let now = new Date();\r\n  let localUTC = -(now.getTimezoneOffset() / 60);\r\n  return localUTC;\r\n}\r\n\r\nfunction displayTimeZones(tz) {\r\n  const utc = parseInt(tz.dataset.utc);\r\n  const cityName = tz.dataset.city;\r\n  const countryCode = tz.dataset.country;\r\n  const img = `<img src=\"../../img/flags/${countryCode}.svg\" />`;\r\n  const difference = (utc - getLocalTimeZone()) * 60 * 60 * 1000;\r\n\r\n  setInterval(() => {\r\n    const now = Date.now();\r\n    const timezoneSeconds = now + difference;\r\n    const timezone = new Date(timezoneSeconds);\r\n    const seconds =\r\n      timezone.getSeconds() < 10\r\n        ? '0' + timezone.getSeconds()\r\n        : timezone.getSeconds();\r\n    const minutes =\r\n      timezone.getMinutes() < 10\r\n        ? '0' + timezone.getMinutes()\r\n        : timezone.getMinutes();\r\n\r\n    const hour =\r\n      timezone.getHours() > 12 ? timezone.getHours() % 12 : timezone.getHours();\r\n    const ampm = timezone.getHours() > 11 ? 'PM' : 'AM';\r\n    const display = `${img} ${cityName} ${hour == 0\r\n      ? 12\r\n      : hour}:${minutes}:${seconds} ${ampm}`;\r\n    tz.innerHTML = display;\r\n  }, 1000);\r\n}\r\n\r\ndocument.addEventListener(\r\n  'DOMContentLoaded',\r\n  timezones.forEach(tz => displayTimeZones(tz))\r\n);\r\n"]}